using System.Text.RegularExpressions;
using WorkerNodeApp.Models;

public class CsvAgentReader
{
    public List<string> Errors { get; } = new();

    public List<Agent> ReadAgents(string filePath)
    {
        var agents = new List<Agent>();
        var lines = File.ReadAllLines(filePath);

        if (lines.Length <= 1)
        {
            Errors.Add("The file is either empty or it doesn't contain any data");
            return agents;
        }

        for (int i = 1; i < lines.Length; i++)
        {
            var line = lines[i].Trim();
            if (string.IsNullOrWhiteSpace(line))
                continue;

            var fields = line.Split(',');

            if (fields.Length < 10)
            {
                Errors.Add("Invalid data. Not enough columns stored");
                continue;
            }

            var name = fields[1].Trim();
            var codeName = fields[2].Trim();
            var location = fields[3].Trim();
            var dobText = fields[4].Trim();
            var contact = fields[5].Trim();
            var lastMission = fields[6].Trim();
            var status = fields[7].Trim();
            var clearence = fields[8].Trim();
            var note = fields[9].Trim();

            if (!DateOnly.TryParse(dobText, out var dob))
            {
                Errors.Add($"[Line {i + 1}] Date of birth date is invalid: {dobText}");
                continue;
            }

            if (!IsValidEmail(contact))
            {
                Errors.Add($"[Line {i + 1}] Contact (email) invalid: {contact}");
                continue;
            }

            agents.Add(new Agent
            {
                AgentID = agentId,
                Name = name,
                CodeName = codeName,
                Location = location,
                DateOfBirth = dob,
                Contact = contact,
                LastMission = lastMission,
                Status = status,
                ClearenceLevel = clearence,
                ArchiveNote = note
            });
        }

        return agents;
    }

    private bool IsValidEmail(string email)
    {
        var pattern = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";
        return Regex.IsMatch(email, pattern);
    }
}
